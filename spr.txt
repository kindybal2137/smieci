import random

### Zadanie 1: Obliczanie liczby PI ###
# a) Metoda Monte Carlo
def monte_carlo_pi(n):
    points_inside_circle = 0
    total_points = 0
    for _ in range(n):
        x = random.uniform(0, 1)
        y = random.uniform(0, 1)
        distance = x**2 + y**2
        if distance <= 1:
            points_inside_circle += 1
        total_points += 1
    return 4 * points_inside_circle / total_points

# b) Metoda Leibniza
def leibniz_pi(n):
    pi = 0
    for i in range(n):
        pi += (-1) ** i / (2 * i + 1)
    return pi * 4

### Zadanie 2: Znajdowanie w ciągu podciągów ###
def find_subsequences(seq):
    subsequences = []
    for i in range(len(seq)):
        for j in range(i + 1, len(seq) + 1):
            subseq = seq[i:j]
            if subseq not in subsequences:
                subsequences.append(subseq)
    return subsequences

### Zadanie 3: Miejsce zerowe metodą połowienia ###
def bisection_method(func, a, b, tol=1e-6):
    if func(a) * func(b) > 0:
        return None
    while (b - a) / 2 > tol:
        midpoint = (a + b) / 2
        if func(midpoint) == 0:
            return midpoint
        elif func(a) * func(midpoint) < 0:
            b = midpoint
        else:
            a = midpoint
    return (a + b) / 2

### Zadanie 4: Odwrotna Notacja Polska (ONP) ###
# a) Konwersja z zapisu infiksowego na ONP
def infix_to_postfix(expression):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
    stack = []
    postfix = ''
    for char in expression:
        if char.isalnum():
            postfix += char
        elif char == '(':
            stack.append(char)
        elif char == ')':
            while stack and stack[-1] != '(':
                postfix += stack.pop()
            stack.pop()
        else:
            while stack and precedence.get(char, 0) <= precedence.get(stack[-1], 0):
                postfix += stack.pop()
            stack.append(char)
    while stack:
        postfix += stack.pop()
    return postfix

# b) Obliczanie wyrażenia zapisanego w ONP
def evaluate_postfix(expression):
    stack = []
    for char in expression:
        if char.isdigit():
            stack.append(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()
            if char == '+':
                stack.append(operand1 + operand2)
            elif char == '-':
                stack.append(operand1 - operand2)
            elif char == '*':
                stack.append(operand1 * operand2)
            elif char == '/':
                stack.append(operand1 / operand2)
            elif char == '^':
                stack.append(operand1 ** operand2)
    return stack[0]

### Zadanie 5: Szybkie potęgowanie ###
# a) Iteracyjne szybkie potęgowanie
def iterative_power(base, exponent):
    result = 1
    while exponent > 0:
        if exponent % 2 == 1:
            result *= base
        base *= base
        exponent //= 2
    return result

# b) Rekurencyjne szybkie potęgowanie
def recursive_power(base, exponent):
    if exponent == 0:
        return 1
    elif exponent % 2 == 0:
        return recursive_power(base * base, exponent // 2)
    else:
        return base * recursive_power(base * base, (exponent - 1) // 2)
